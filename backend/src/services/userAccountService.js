const nodemailer = require("nodemailer");
const { Op } = require("sequelize");
require("dotenv").config();
import createEmailTemplate from "./../template/createEmailTemplate";
import db from "./../../models/index";
import bcrypt from "bcryptjs";

// Function to hash a password
// Hàm băm mật khẩu
const hashPass = async (password) => {
    const salt = await bcrypt.genSalt(10);
    return await bcrypt.hash(password, salt);
};

// Function to generate a verification code
// Hàm tạo mã xác minh
const generateCode = () => {
    return Math.floor(100000 + Math.random() * 900000).toString();
};

// Function to send a verification email
// Hàm gửi email xác minh
const sendVerificationEmail = async (email, verificationCode) => {
    try {
        // Creates a Nodemailer transport object using credentials from environment variables.
        // Tạo một đối tượng Nodemailer sử dụng thông tin xác thực từ các biến môi trường.
        const transporter = nodemailer.createTransport({
            service: "Gmail",
            auth: {
                user: process.env.EMAIL_USER,
                pass: process.env.EMAIL_PASSWORD,
            },
        });

        // Configures email options including sender address, recipient address, subject, and HTML content generated by a separate function (createEmailTemplate).
        // Cấu hình các tùy chọn email bao gồm địa chỉ người gửi, địa chỉ người nhận, tiêu đề và nội dung HTML được tạo bởi một hàm riêng biệt (createEmailTemplate).
        const mailOptions = {
            from: `Check STK Lừa Đảo <${process.env.EMAIL_USER}>`,
            to: email,
            subject: "Mã Xác Thực",
            html: createEmailTemplate(verificationCode),
        };

        // Sends the email using the transporter and logs the message ID upon success.
        // Gửi email bằng bộ vận chuyển và ghi lại ID message khi thành công.
        const info = await transporter.sendMail(mailOptions);
        console.log("Message sent: %s", info.messageId);

        return {
            EM: "Đăng ký thành công. Vui lòng xác nhận email để hoàn tất đăng ký.",
            EC: 0,
            DT: null,
        };
    } catch (error) {
        console.error("Failed to send verification email:", error);
        return {
            EM: "Có lỗi xảy ra khi gửi email xác nhận.",
            EC: -3,
            DT: error.message,
        };
    }
};

// Function to get roles by email
// Hàm lấy vai trò bằng email
const getRolesByEmail = async (email) => {
    try {
        // Fetches the user from the database based on the provided email.
        // Lấy người dùng từ cơ sở dữ liệu dựa trên email được cung cấp.
        const user = await db.User.findOne({ where: { email } });

        if (!user) {
            return {
                EM: "Không tìm thấy người dùng!",
                EC: -1,
                DT: null,
            };
        }

        // Fetches the group associated with the user and includes the related role information.
        // Lấy nhóm được liên kết với người dùng và bao gồm thông tin vai trò liên quan.
        const groupWithRole = await db.Group.findOne({
            where: { id: user.groupId },
            include: [
                {
                    model: db.Role,
                    attributes: ["roleName", "permission", "description"],
                },
            ],
        });

        // Returns an error response if no group or role information is found for the user.
        // Trả về response lỗi nếu không tìm thấy thông tin nhóm hoặc vai trò nào cho người dùng.
        if (!groupWithRole || !groupWithRole.Role) {
            return {
                EM: "Không tìm thấy role cho group này!",
                EC: -1,
                DT: null,
            };
        }

        // Creates a role object containing retrieved role properties.
        // Tạo một đối tượng role chứa các thuộc tính role được truy xuất.
        const role = {
            roleName: groupWithRole.Role.roleName,
            permission: groupWithRole.Role.permission,
            description: groupWithRole.Role.description,
        };

        return role;
    } catch (error) {
        console.log("Lỗi khi truy vấn vai trò:", error);
        return {
            EM: "Lỗi khi truy vấn vai trò.",
            EC: -1,
            DT: null,
        };
    }
};

// Function to handle user registration
// Hàm xử lý đăng ký người dùng
const handleRegisterUser = async (email, password, fullName) => {
    try {
        // Checks if a verified user with the same email already exists.
        // Kiểm tra xem đã tồn tại người dùng đã được xác minh với cùng email chưa.
        const verifiedUserExists = await db.User.findOne({
            where: { email, isVerified: true },
        });

        // Returns an error response if a verified user with the same email exists.
        // Trả về phản hồi lỗi nếu đã tồn tại người dùng đã được xác minh với cùng email.
        if (verifiedUserExists) {
            return {
                EM: "Email này đã được đăng ký và xác minh. Vui lòng đăng nhập.",
                EC: -1,
                DT: null,
            };
        }

        // Checks if a user with the same email exists but is not verified.
        // Kiểm tra xem đã tồn tại người dùng với cùng email nhưng chưa được xác minh.
        const userExists = await db.User.findOne({
            where: { email, isVerified: false },
        });

        // Hashes the password for secure storage.
        // Băm mật khẩu để lưu trữ an toàn.
        const hash = await hashPass(password);

        // Generates a verification code.
        // Tạo mã xác minh.
        const verificationCode = generateCode();

        // If an unverified user exists, updates their password, full name, code, and verification status.
        // Nếu tồn tại người dùng chưa được xác minh, cập nhật mật khẩu, tên đầy đủ, mã và trạng thái xác minh của họ.
        if (userExists) {
            await userExists.update({
                password: hash,
                fullName: fullName,
                codeVery: verificationCode,
                codeCreatedAt: new Date(),
                isVerified: false,
            });

            // Sends a new verification email with the updated code.
            // Gửi email xác minh mới với mã cập nhật.
            sendVerificationEmail(email, verificationCode);

            return {
                EM: "Đăng ký thành công. Mã xác nhận mới đã được gửi.",
                EC: 0,
                DT: null,
            };
        }

        // If no user exists, creates a new user with the provided details and sends a verification email.
        // Nếu không tồn tại người dùng, tạo người dùng mới với các chi tiết được cung cấp và gửi email xác minh.
        await db.User.create({
            email: email,
            password: hash,
            fullName: fullName,
            codeCreatedAt: new Date(),
            codeVery: verificationCode,
            isVerified: false,
        });

        sendVerificationEmail(email, verificationCode);

        return {
            EM: "Đăng ký thành công. Vui lòng xác nhận email để hoàn tất đăng ký.",
            EC: 0,
            DT: null,
        };
    } catch (error) {
        console.error(error);
        return {
            EM: "Lỗi hệ thống.",
            EC: -2,
            DT: error.message,
        };
    }
};

// Function to check if an email exists
// Hàm kiểm tra xem email có tồn tại hay không
const handleExistsEmail = async (email) => {
    try {
        // Fetches a user from the database based on the provided email.
        // Lấy người dùng từ cơ sở dữ liệu dựa trên email được cung cấp.
        const userExists = await db.User.findOne({ where: { email: email } });

        // Returns the user object if found, otherwise returns false.
        // Trả về đối tượng người dùng nếu tìm thấy, nếu không trả về false.
        if (userExists) {
            return userExists;
        } else {
            return false;
        }
    } catch (error) {
        console.log(error);
    }
};

// Function to verify the registration code
// Hàm xác minh mã đăng ký
const handleVeryCodeRegister = async (code, email) => {
    try {
        // Gets the current time and calculates 10 minutes ago.
        // Lấy thời gian hiện tại và tính toán 10 phút trước.
        const now = new Date();
        const tenMinutesAgo = new Date(now.getTime() - 10 * 60000);

        // Tìm người dùng dựa trên mã xác minh được cung cấp và các tiêu chí để xác minh thành công:
        // - Mã xác minh khớp (`codeVery`)
        // - Trạng thái chưa xác minh (`isVerified: false`)
        // - Thời gian tạo mã trong vòng 10 phút gần đây (`codeCreatedAt: { [Op.gt]: tenMinutesAgo }`)
        const user = await db.User.findOne({
            where: {
                email: email,
                codeVery: code,
                isVerified: false,
                codeCreatedAt: { [Op.gt]: tenMinutesAgo },
            },
        });

        // Returns an error response if no user is found with the matching code or if the code is expired (older than 10 minutes).
        // Trả về phản hồi lỗi nếu không tìm thấy người dùng nào với mã khớp hoặc nếu mã đã hết hạn (cũ hơn 10 phút).
        if (!user) {
            return {
                success: false,
                EM: "Mã xác nhận không hợp lệ hoặc đã hết hạn.",
                EC: -1,
            };
        }

        // Updates the user to mark them as verified, and clears the verification code and creation time.
        // Cập nhật người dùng để đánh dấu họ đã được xác minh và xóa mã xác minh và thời gian tạo.
        await user.update({
            isVerified: true,
            codeVery: null,
            codeCreatedAt: null,
        });

        return {
            success: true,
            EM: "Xác thực thành công.",
            EC: 0,
        };
    } catch (error) {
        console.error("Error verifying code:", error);
        return {
            success: false,
            EM: "Lỗi cơ sở dữ liệu khi xác nhận mã.",
            EC: -2,
        };
    }
};

// Function to save verification code
// Hàm lưu mã xác minh
const handleSaveCodeVery = async (email, code) => {
    try {
        // Attempts to update the `codeVery` and `codeCreatedAt` fields for the user with the provided `email` in the database.
        // Cố gắng cập nhật các trường `codeVery` và `codeCreatedAt` cho người dùng với `email` được cung cấp trong cơ sở dữ liệu.
        const result = await db.User.update(
            { codeVery: code, codeCreatedAt: new Date() },
            { where: { email } }
        );

        // Checks if the update operation was successful.
        // Kiểm tra xem thao tác cập nhật có thành công hay không.
        if (result[0] === 0) {
            console.log(
                "Không tìm thấy người dùng hoặc cập nhật không thành công."
            );
            return {
                EC: -1,
                EM: "Không tìm thấy người dùng hoặc cập nhật không thành công.",
            };
        }

        return { EC: 0, EM: "Cập nhật thành công." };
    } catch (error) {
        console.log(error);
    }
};

module.exports = {
    handleRegisterUser,
    getRolesByEmail,
    handleExistsEmail,
    handleSaveCodeVery,
    handleVeryCodeRegister,
};
